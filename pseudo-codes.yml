__init__: |
  FONCTION __init__(self, *args) :
    # Assignation des attributs de l'objet Student
    self.name, self.courage, self.ambition, self.intelligence, self.good = args

    # Calcul des distances avec les autres personnages et stockage dans self.distances
    self.distances = {ch['Name']: {"Distance": self.distance(ch), "House": ch["House"]} for ch in CHARACTERS}

    # Recherche des K voisins les plus proches et stockage dans self.closests
    self.closests = trier(self.distances.items(), clé=lambda x: x[1]["Distance"])[:K]

    # Création d'une chaîne de texte représentant les voisins les plus proches
    self.text_closests = '\n'.join([f'{BLEU}{nom}{RESET} dans la maison {BLEU}{attr["House"]}{RESET}' for nom, attr in self.closests])

    # Identification de la maison majoritaire parmi les K voisins les plus proches
    maisons = Compteur(attr["House"] pour _, attr dans self.closests)
    self.house = max(maisons, clé=maisons.get)

    # Vérification s'il y a une égalité dans le nombre de voisins par maison
    maisons_ont_egalite = len(ensemble(maisons.values())) != len(maisons.values())

    # Si une égalité est présente, ajustement de la maison attribuée en fonction du nombre total
    # de voisins pour chaque maison
    SI maisons_ont_egalite :
        compte_maison = {}
        POUR _, attr DANS self.closests :
            compte_maison[attr["House"]] = compte_maison.get(attr["House"], 0) + 1

            SI compte_maison[attr["House"]] == maisons[max(maisons, clé=maisons.get)] :
                self.house = attr["House"]
                FIN POUR
                
distance: |
  FONCTION distance(self, character: dict) -> float :
    # Calcul des carrés des différences entre les caractéristiques
    diff_courage = (int(self.courage) - int(character["Courage"])) ** 2
    diff_ambition = (int(self.ambition) - int(character["Ambition"])) ** 2
    diff_intelligence = (int(self.intelligence) - int(character["Intelligence"])) ** 2
    diff_good = (int(self.good) - int(character["Good"])) ** 2

    # Somme des carrés des différences
    somme_carres_diff = diff_courage + diff_ambition + diff_intelligence + diff_good

    # Calcul de la racine carrée de la somme des carrés des différences
    distance_euclidienne = racine_carree(somme_carres_diff)

    # Retourne la distance euclidienne calculée
    RETOURNER distance_euclidienne

read_csv: |
  Fonction read_csv(file: str) -> list[dict] :
    # Ouvre le fichier csv en mode lecture avec l'encodage utf-8
    AVEC ouvrir(file, mode='r', encodage='utf-8') comme f :
        # Utilise le lecteur csv pour lire le fichier
        lecteur = DictReader(f, délimiteur=";")

        # Transforme chaque élément du lecteur en un dictionnaire
        RETOURNER [{cle: valeur.remplacer('\xa0', ' ') POUR cle, valeur DANS élément.items()} POUR élément DANS lecteur]

merge: |
  FONCTION merge(characters: str, attributes: str) -> list[dict] :
    # Initialisation de la liste qui va contenir les personnages fusionnés
    poudlard_characters = []

    # Parcours des caractéristiques Poudlard
    POUR poudlard_character DANS read_csv(attributes) :
        # Parcours des personnages Kaggle
        POUR kaggle_character DANS read_csv(characters) :
            # Vérification si le nom du personnage correspond
            SI poudlard_character['Name'] == kaggle_character['Name'] :
                # Met à jour les caractéristiques Poudlard avec les données Kaggle
                poudlard_character.mettre_à_jour(kaggle_character)
                
                # Ajoute le personnage fusionné à la liste
                poudlard_characters.append(poudlard_character)

    # Retourne la liste des personnages fusionnés
    RETOURNER poudlard_characters

main: |
  Fonction principale main() :
    # Affiche le texte de l'IHM
    imprimer(TEXTE_IHM, fin="")

    # Demande à l'utilisateur d'entrer l'identifiant de l'élève
    student_id = entrée()

    # Continue tant que l'identifiant est valide
    TANT QUE student_id DANS ('1', '2', '3', '4', '5') OU len(student_id.split(" ")) == 4 :
        # Affiche les informations de l'élève en fonction de l'identifiant
        imprimer(students[int(student_id) - 1] SI len(student_id) == 1 SINON Student("personnalisé", *student_id.split(" ")))

        # Demande à l'utilisateur d'entrer un nouvel identifiant
        student_id = entrée(f"{JAUNE}>>> Élève n°")

    # Affiche un message de départ
    imprimer("Au revoir!")
