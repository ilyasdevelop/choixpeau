from math import sqrt
import csv

def fusion_de_table(table_perso, caracteristique_perso):
    with open(table_perso, mode='r', encoding='utf-8') as f:
        reader = csv.DictReader(f, delimiter=";")
        characters_tab = [{key : value.replace('\xa0', ' ') for key, value in element.items()} for element in reader]

    with open(caracteristique_perso, mode='r', encoding='utf-8') as f:
        reader = csv.DictReader(f, delimiter=';')
        characteristics_tab = [{key : value for key, value in element.items()} for element in reader]

    poudlard_characters = []

    for poudlard_character in characteristics_tab:
        for kaggle_character in characters_tab:
            if poudlard_character['Name'] == kaggle_character['Name']:
                poudlard_character.update(kaggle_character)
                poudlard_characters.append(poudlard_character)

    return poudlard_characters

table_personnages = fusion_de_table("Characters.csv", "Caracteristiques_des_persos.csv")


index_eleves = {  
"eleve_1" : {"Courage" : 9, "Ambition" : 2, "Intelligence" : 8, "Good" : 9},
"eleve_2" : {"Courage" : 6, "Ambition" : 7, "Intelligence" : 9, "Good" : 7},
"eleve_3" : {"Courage" : 3, "Ambition" : 8, "Intelligence" : 6, "Good" : 3},
"eleve_4" : {"Courage" : 2, "Ambition" : 3, "Intelligence" : 7, "Good" : 8},
"eleve_5" : {"Courage" : 3, "Ambition" : 4, "Intelligence" : 8, "Good" : 8}
}

def distance(eleve, pers, index, methode="euclidienne"):
    return sqrt((int(index[eleve]["Courage"]) - int(pers["Courage"])) ** 2
                + (int(index[eleve]["Ambition"]) - int(pers["Ambition"])) ** 2
                + (int(index[eleve]["Intelligence"]) - int(pers["Intelligence"])) ** 2
                + (int(index[eleve]["Good"]) - int(pers["Good"])) ** 2)

def ajout_distances(table, personnage_inconnu, index):
    for personnage in table:
        personnage['Distance'] = distance(personnage_inconnu, personnage, index)
    return table

def maison_choisie(table):
    maisons = {}
    for voisin in table:
        if voisin['House'] in maisons:
            maisons[voisin['House']] += 1
        else:
            maisons[voisin['House']] = 1
    print(maisons)
    maximum = 0
    for maison, nb in maisons.items():
        if nb > maximum:
            maximum = nb
            top_maison = maison
    return top_maison

for eleve in index_eleves.keys():
    table_avec_distance = ajout_distances(table_personnages, eleve, index_eleves)
    table_avec_distance.sort(key=lambda x: x['Distance'])
    k = 5
    voisins = table_avec_distance[:k]
    plus_proche_voisins = maison_choisie(voisins)
    print(plus_proche_voisins)
